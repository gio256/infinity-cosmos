/-
Copyright (c) 2024 Johns Hopkins Category Theory Seminar. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johns Hopkins Category Theory Seminar
-/

import InfinityCosmos.ForMathlib.AlgebraicTopology.SimplicialSet.CoherentIso
import Mathlib.AlgebraicTopology.SimplicialSet.StrictSegal

universe u v w

namespace SSet

open CategoryTheory Simplicial SimplicialCategory

/-- An interval is a simplicial set equipped with two endpoints.-/
class Interval (I : SSet.{u}) : Type u where
  src : Œî[0] ‚ü∂ I
  tgt : Œî[0] ‚ü∂ I

/-- The interval relevant to the theory of Kan complexes.-/
instance arrowInterval : Interval Œî[1] where
  src := standardSimplex.map (SimplexCategory.Œ¥ (n := 0) (1))
  tgt := standardSimplex.map (SimplexCategory.Œ¥ (n := 0) (0))

/-- The interval relevant to the theory of quasi-categories. -/
instance isoInterval : Interval coherentIso where
  src :=   (yonedaEquiv coherentIso [0]).symm (WalkingIso.coev WalkingIso.zero)
  tgt :=   (yonedaEquiv coherentIso [0]).symm (WalkingIso.coev WalkingIso.one)


open MonoidalCategory
def pointIsUnit : Œî[0] ‚âÖ (ùüô_ SSet) := by sorry

noncomputable def expUnitNatIso : ihom (ùüô_ SSet) ‚âÖ ùü≠ SSet :=
  (conjugateIsoEquiv (Adjunction.id (C := SSet)) (ihom.adjunction _)
    (leftUnitorNatIso _)).symm

def expPointNatIso : ihom Œî[0] ‚âÖ ùü≠ SSet := by sorry
--   refine ?_ ‚â™‚â´ expUnitNatIso
--   have := pointIsUnit.symm.op
--   sorry

/-- Once we've proven that `Œî[0]` is terminal, this will follow from something just PRed to mathlib.-/
def expPointIsoSelf (X : SSet) : sHom Œî[0] X ‚âÖ X := sorry

section

variable {I : SSet.{u}} [Interval I]

noncomputable def pathSpace {I : SSet.{u}} [Interval I] (X : SSet.{u}) : SSet.{u} := sHom I X

open MonoidalClosed

noncomputable def pathSpace.src (X : SSet.{u}) : pathSpace (I := I) X ‚ü∂ X :=
  ((MonoidalClosed.pre Interval.src).app X ‚â´ X.expPointIsoSelf.hom)

noncomputable def pathSpace.tgt (X : SSet.{u}) : pathSpace (I := I) X ‚ü∂ X :=
  ((MonoidalClosed.pre Interval.tgt).app X ‚â´ X.expPointIsoSelf.hom)


/-- TODO: Figure out how to allow `I` to be an a different universe from `A` and `B`?-/
structure Homotopy {A B : SSet.{u}} (f g : A ‚ü∂ B) : Type u
    where
  homotopy : A ‚ü∂ sHom I B
  source_eq : homotopy ‚â´ pathSpace.src B = f
  target_eq : homotopy ‚â´ pathSpace.tgt B = g

/-- For the correct interval, this defines a good notion of equivalences for both Kan complexes
and quasi-categories.-/
structure Equiv (A B : SSet.{u}) : Type u where
  toFun : A ‚ü∂ B
  invFun : B ‚ü∂ A
  left_inv : Homotopy (I := I) (toFun ‚â´ invFun) (ùüô A)
  right_inv : Homotopy (I := I) (invFun ‚â´ toFun) (ùüô B)

end

section

open SimplexCategory

variable {A : SSet.{u}} (f g : Œî[1] ‚ü∂ A)

structure HomotopyL where
  homotopy : Œî[2] ‚ü∂ A
  face0 : standardSimplex.map (Œ¥ 0) ‚â´ homotopy =
    standardSimplex.map (œÉ 0) ‚â´ standardSimplex.map (Œ¥ 0) ‚â´ f
  face1 : standardSimplex.map (Œ¥ 1) ‚â´ homotopy = g
  face2 : standardSimplex.map (Œ¥ 2) ‚â´ homotopy = f

structure HomotopyR where
  homotopy : Œî[2] ‚ü∂ A
  face0 : standardSimplex.map (Œ¥ 0) ‚â´ homotopy = f
  face1 : standardSimplex.map (Œ¥ 1) ‚â´ homotopy = g
  face2 : standardSimplex.map (Œ¥ 2) ‚â´ homotopy =
    standardSimplex.map (œÉ 0) ‚â´ standardSimplex.map (Œ¥ 1) ‚â´ f

def HomotopicL : Prop :=
    Nonempty (HomotopyL f g)

def HomotopicR : Prop :=
    Nonempty (HomotopyR f g)

structure HtpyL (f g : A _[1]) where
  simplex : A _[2]
  Œ¥‚ÇÇ : A.Œ¥ 2 simplex = f
  Œ¥‚ÇÅ : A.Œ¥ 1 simplex = g
  Œ¥‚ÇÄ : A.Œ¥ 0 simplex = A.œÉ 0 (A.Œ¥ 0 f)

structure HtpyR (f g : A _[1]) where
  simplex : A _[2]
  Œ¥‚ÇÇ : A.Œ¥ 2 simplex = A.œÉ 0 (A.Œ¥ 1 f)
  Œ¥‚ÇÅ : A.Œ¥ 1 simplex = g
  Œ¥‚ÇÄ : A.Œ¥ 0 simplex = f

def Homotopic (f g : A _[1]) : Prop := Nonempty (HtpyL f g)

def HomotopyR.refl : HomotopyR f f where
  homotopy := standardSimplex.map (œÉ 0) ‚â´ f
  face0 := by
    rw [‚Üê Category.assoc, ‚Üê Functor.map_comp, Œ¥_comp_œÉ_self' (by simp)]
    simp
  face1 := by
    rw [‚Üê Category.assoc, ‚Üê Functor.map_comp, Œ¥_comp_œÉ_succ' (by simp)]
    simp
  face2 := by
    rw [‚Üê Category.assoc, ‚Üê Functor.map_comp, ‚Üê Category.assoc, ‚Üê Functor.map_comp,
        ‚Üê Œ¥_comp_œÉ_of_gt (by simp)]
    rfl

lemma foo {A : SSet.{u}} (s : A _[2]) : (A.spine 2 s).arrow 0 = A.Œ¥ 2 s := by
  have h : mkOfSucc 0 = Œ¥ 2 := by
    ext i
    fin_cases i <;> rfl
  simp [SimplicialObject.Œ¥]
  rw [h]

lemma bar {A : SSet.{u}} (s : A _[2]) : (A.spine 2 s).arrow 1 = A.Œ¥ 0 s := by
  have h : mkOfSucc 1 = Œ¥ 0 := by
    ext i
    fin_cases i <;> rfl
  simp [SimplicialObject.Œ¥]
  rw [h]

lemma baz {A : SSet.{u}} (s : A _[2]) : A.diagonal s = A.Œ¥ 1 s := by
  have h : diag 2 = Œ¥ 1 := by
    ext i
    fin_cases i <;> rfl
  simp [SimplicialObject.diagonal, SimplicialObject.Œ¥]
  rw [h]

open StrictSegal in
lemma segal_homotopy' [StrictSegal A] (f g : A _[1]) : Homotopic f g ‚Üî f = g := by
  have hff : HtpyL f f := sorry
  apply Iff.intro <;> intro h
  ¬∑ have hfg := Classical.choice h
    have hdg : spineToDiagonal (A.spine 2 hfg.simplex) = g := by
      simp [spineToDiagonal]
      rw [spineToSimplex_spine]
      rw [baz]
      exact hfg.Œ¥‚ÇÅ
    have hdf : spineToDiagonal (A.spine 2 hff.simplex) = f := by
      simp [spineToDiagonal]
      rw [spineToSimplex_spine]
      rw [baz]
      exact hff.Œ¥‚ÇÅ
    have hs : A.spine 2 hfg.simplex = A.spine 2 hff.simplex := by
      ext i
      fin_cases i
      ¬∑ simp only [Nat.reduceAdd, Fin.zero_eta, Fin.isValue]
        simp only [foo]
        rw [hff.Œ¥‚ÇÇ]
        exact hfg.Œ¥‚ÇÇ
      ¬∑ simp only [Nat.reduceAdd, Fin.mk_one, Fin.isValue]
        simp only [bar]
        rw [hff.Œ¥‚ÇÄ]
        exact hfg.Œ¥‚ÇÄ
    have hdf : spineToDiagonal (A.spine 2 hfg.simplex) = f := by
      rw [hs]
      exact hdf
    rw [‚Üê hdg]
    exact hdf.symm
  ¬∑ apply Nonempty.intro
    rw [‚Üê h]
    exact hff

/- set_option pp.notation false -/
open StrictSegal in
lemma segal_homotopy [StrictSegal A] : HomotopicR f g ‚Üî f = g := by
  apply Iff.intro <;> intro h
  ¬∑ have h : HomotopyR f g := Classical.choice h
    apply (SSet.yonedaEquiv _ _).injective
    apply spineInjective
    simp [spineEquiv]
    rw [‚Üê Category.id_comp f]
    rw [‚Üê h.face0]
    /- #check spine A 2 (yonedaEquiv _ _ h.homotopy) -/
    have hd : diag 2 = Œ¥ 1 := by
      ext i
      fin_cases i <;> rfl
    have ha : SimplicialObject.diagonal A (yonedaEquiv _ _ h.homotopy) = yonedaEquiv _ _ g := by
      simp [SimplicialObject.diagonal]
      rw [hd]
      conv => rhs; rw [‚Üê h.face1]
      simp
      /- rw [‚Üê types_comp_apply (A.yonedaEquiv [2]) (A.map _)] -/
      /- simp [yonedaEquiv, yonedaCompUliftFunctorEquiv] -/
      /- rw [‚Üê types_comp_apply (h.homotopy.app _) (A.map _)] -/

      sorry
    have hh : spineToDiagonal (spine A 2 (yonedaEquiv _ _ h.homotopy)) = yonedaEquiv _ _ g := by
      simp [spineToDiagonal]
      simp [spineToSimplex_spine]
      simp [SimplicialObject.diagonal]

      sorry
    ext i
    fin_cases i
    simp
    sorry
    /- ext n x -/
    /- apply (SSet.yonedaEquiv _ _).injective -/
  ¬∑ apply Nonempty.intro
    rw [‚Üê h]
    exact HomotopyR.refl f

lemma HomotopyR.equiv : --[Quasicategory A] :
    Equivalence (fun f g : Œî[1] ‚ü∂ A ‚Ü¶ HomotopicR f g) where
  refl f := ‚ü®HomotopyR.refl f‚ü©
  symm := sorry
  trans := sorry

lemma homotopicL_iff_homotopicR : --[Quasicategory A]
    HomotopicL f g ‚Üî HomotopicR f g := sorry

lemma HomotopyL.equiv : --[Quasicategory A]
    Equivalence (fun f g : Œî[1] ‚ü∂ A ‚Ü¶ HomotopicL f g) := by
  simp [homotopicL_iff_homotopicR]
  exact HomotopyR.equiv

end

end SSet
